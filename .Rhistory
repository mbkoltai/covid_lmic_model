date_start="2019-11-01",date_end="2020-10-01")
params$pop[[1]]$name=countryval
params$pop[[1]]$size=somalia_agegroups_IFR$agegroupsize*(mogadishu_popul/sum(somalia_agegroups_IFR$agegroupsize))
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
### SEEDING ---
npi_on_day=min(OxCGRT_input$date[OxCGRT_input$NPI_on>0]); introd_day=as.Date("2019-12-01")
seeding_t_window=sapply(rep(introd_day,2),function(x) as.numeric(x-as.Date(params$date0)))
params$pop[[1]]$seed_times=rep(seeding_t_window[1]:seeding_t_window[2],each=50) # x new infections/day for n days
# infections start in individuals aged 20-50, 1 introd in each age group
params$pop[[1]]$dist_seed_ages=cm_age_coefficients(20,40,5*(0:length(params$pop[[1]]$size)))
params$processes <- list(cm_multinom_process("Ip",outcomes=data.table(death=somalia_agegroups_IFR$ifr_mean/params$pop[[1]]$y),
delays=data.table(death=cm_delay_gamma(22,22,60,1/4)$p), report="o"))
params$processes
suscept_clinfract_posteriors<-read_csv("repo_data/suscept_clinfract_posteriors_davies2010.csv") %>%
mutate(agegroup=factor(agegroup,levels=unique(agegroup)))
susc_clinfract_plot=rbind(suscept_clinfract_posteriors %>% mutate(type="literature"),
rbind(data.frame(name="clin_fract",agegroup=unique(suscept_clinfract_posteriors$agegroup),value=params$pop[[1]]$y,type="approx"),
data.frame(name="susceptibility",agegroup=unique(suscept_clinfract_posteriors$agegroup),value=c(rep(0.38,4),rep(0.8,12)),type="approx"))) %>%
mutate(name=gsub("clin_fract","clinical fraction",name))
ggplot(susc_clinfract_plot,aes(x=agegroup,y=value,color=type,group=type)) + geom_line() + geom_point() +
facet_wrap(~name,scales="free") + theme_bw() + standard_theme + scale_y_continuous(breaks=(2:20)/20) +
theme(axis.text.x=element_text(vjust = 0.5)) + ylab("proportion/normalised value")
params$pop[[1]]$y=fun_lin_approx_agedep_par(agegroups=somalia_agegroups_IFR,min_val=0.25,max_val=0.7,rep_min=6,rep_max=2)
susc_clinfract_plot=rbind(suscept_clinfract_posteriors %>% mutate(type="literature"),
rbind(data.frame(name="clin_fract",agegroup=unique(suscept_clinfract_posteriors$agegroup),value=params$pop[[1]]$y,type="approx"),
data.frame(name="susceptibility",agegroup=unique(suscept_clinfract_posteriors$agegroup),value=c(rep(0.38,4),rep(0.8,12)),type="approx"))) %>%
mutate(name=gsub("clin_fract","clinical fraction",name))
ggplot(susc_clinfract_plot,aes(x=agegroup,y=value,color=type,group=type)) + geom_line() + geom_point() +
facet_wrap(~name,scales="free") + theme_bw() + standard_theme + scale_y_continuous(breaks=(2:20)/20) +
theme(axis.text.x=element_text(vjust = 0.5)) + ylab("proportion/normalised value")
ggplot(cbind(data.frame(age=factor(somalia_agegroups_IFR$agegroup,levels=unique(somalia_agegroups_IFR$agegroup)),
literature=IFR_estimates_Sandmann2021$ifr_mean),
data.frame(sapply(c(1,2,3), function(x) {inv.logit(logit(IFR_estimates_Sandmann2021$ifr_mean) + x)}))) %>%
rename(`logit(IFR)+1`=X1,`logit(IFR)+2`=X2,`logit(IFR)+3`=X3) %>% pivot_longer(!age),
aes(x=age,y=value,group=name,color=name)) + geom_line() + geom_point() + theme_bw() + ylab("IFR") + labs(color="") +
scale_y_log10( breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)) ) + annotation_logticks(sides="lr") +
theme(axis.text=element_text(size=13),axis.text.x=element_text(angle=90,vjust=0.5),axis.title=element_text(size=15),
legend.text=element_text(size=15))
k_compl=0.3
for (k in 1:length(NPIvals)) { # setup for version 1
if (cm_version==1) {if (k==1) {params$pop[[1]]$schedule=NULL; iv=cm_iv_build(params)} # sets up data structure for interventions
cm_iv_contact(iv, NPI_phases[[k]][1], NPI_phases[[k]][2], 1-(1-as.numeric(rep(NPIvals[k],4)))*k_compl)
if (k==length(NPIvals)) {params=cm_iv_apply(params,iv)} } else { # sets the "schedule" parameter to follow interventions in iv
# version 2
params$schedule[[k]]=list(parameter="contact",pops=numeric(),mode="multiply",
values=list(rep(NPIvals[k],4),rep(1,4)),times=NPI_phases[[k]])} }
ptm <- proc.time(); run=cm_simulate(params,1); proc.time()-ptm
# covidm_simul_agesep=fcn_covidm_df(run$dynamics,sel_vars=c("cases","subclinical","death_o","R"),params)
# sum of age groups
covidm_simul=fcn_covidm_process_output(run$dynamics,filter_vars=c("E","foi","cases_reported"),
compartm_types=list(case_vars=c("cases","subclinical","Ia","Ip","Is","S","R"),death_vars=c("D","death_o")),
dynamics_type=list(cumul=c("D","R","S"),incid=c("cases","subclinical","death_o"),preval=c("Ia","Ip","Is")),
populval=mogadishu_popul,params)
seeding_df=data.frame(seed_date=unique(covidm_simul$date)[unique(params$pop[[1]]$seed_times)]) %>%
summarise(min=min(seed_date),max=max(seed_date))
# make the plot
ggplot(subset(covidm_simul,!dynam_type %in% "preval")) + geom_area(aes(x=date,y=value,fill=compartment),color="black",size=0.3) +
facet_wrap(dynam_type~compartm_type,scales="free") + theme_bw() + standard_theme + theme(axis.text.x=element_text(vjust=0.5)) +
scale_x_date(limits=as.Date(c("2019-12-01",params$time1)),date_breaks="2 weeks",expand=expansion(0,0)) + ylab("number") +
scale_y_continuous(expand=expansion(0.01,0)) + geom_vline(data=npi_df,aes(xintercept=on,color=name),size=1,linetype="dashed") +
geom_rect(data=seeding_df,aes(xmin=min,xmax=max,ymin=0,ymax=Inf),fill="pink",color=NA,alpha=0.4) + labs(fill="")
fitting_date_window=as.Date(c("2020-01-15","2020-10-01"))
fcn_covidm_singlesim_error(covidm_simul,introd_day,seedsize = 50,out_bdr_daily_estimates,fitting_date_window)
cm_calc_R0(params,1)
target_R0=1.8; params$pop[[1]]$u=c(rep(0.38,4),rep(0.8,12)) # susceptibility_warvick_model$value #
params$pop[[1]]$u=params$pop[[1]]$u*(target_R0/cm_calc_R0(params,1))
ptm <- proc.time(); run=cm_simulate(params,1); proc.time()-ptm
# covidm_simul_agesep=fcn_covidm_df(run$dynamics,sel_vars=c("cases","subclinical","death_o","R"),params)
# sum of age groups
covidm_simul=fcn_covidm_process_output(run$dynamics,filter_vars=c("E","foi","cases_reported"),
compartm_types=list(case_vars=c("cases","subclinical","Ia","Ip","Is","S","R"),death_vars=c("D","death_o")),
dynamics_type=list(cumul=c("D","R","S"),incid=c("cases","subclinical","death_o"),preval=c("Ia","Ip","Is")),
populval=mogadishu_popul,params)
# PLOT
# df for seeding
seeding_df=data.frame(seed_date=unique(covidm_simul$date)[unique(params$pop[[1]]$seed_times)]) %>%
summarise(min=min(seed_date),max=max(seed_date))
# make the plot
ggplot(subset(covidm_simul,!dynam_type %in% "preval")) + geom_area(aes(x=date,y=value,fill=compartment),color="black",size=0.3) +
facet_wrap(dynam_type~compartm_type,scales="free") + theme_bw() + standard_theme + theme(axis.text.x=element_text(vjust=0.5)) +
scale_x_date(limits=as.Date(c("2019-12-01",params$time1)),date_breaks="2 weeks",expand=expansion(0,0)) + ylab("number") +
scale_y_continuous(expand=expansion(0.01,0)) + geom_vline(data=npi_df,aes(xintercept=on,color=name),size=1,linetype="dashed") +
geom_rect(data=seeding_df,aes(xmin=min,xmax=max,ymin=0,ymax=Inf),fill="pink",color=NA,alpha=0.4) + labs(fill="")
# SAVE
fitting_date_window=as.Date(c("2020-01-15","2020-10-01"))
fcn_covidm_singlesim_error(covidm_simul,introd_day,seedsize = 50,out_bdr_daily_estimates,fitting_date_window)
somalia_acled_data <- read_csv("repo_data/2018-04-23-2021-04-28-Somalia.csv")
somalia_acled_fatalities <- somalia_acled_data %>% group_by(event_date,admin1) %>%
summarise(date=unique(dmy(event_date)),fatalities=sum(fatalities),year=unique(year)) %>% ungroup() %>% group_by(admin1) %>%
complete(date=seq.Date(min(date),max(date),by="day")) %>% mutate(fatalities_missing_as_0=ifelse(is.na(fatalities),0,fatalities),
rollingmean=roll_mean(fatalities_missing_as_0,7,align="center",fill=NA,na.rm=T),
rollingsum=roll_sum(fatalities_missing_as_0,7,fill=NA,align="right"),
rollingsum_month_acled=roll_sum(fatalities_missing_as_0,30,fill=NA,align="right")) %>%
mutate(year=year(date),month=month(date),week=week(date))
# fitting_date_window=as.Date(c("2020-01-15","2020-10-01"))
p<-ggplot(subset(somalia_acled_fatalities, admin1=="Banadir" & date>=as.Date("2019-01-01") & date<=as.Date("2021-01-01"))) + #
geom_bar(aes(x=date,y=fatalities),stat="identity") + geom_line(aes(x=date,y=rollingmean)) + # facet_wrap(~admin1,scales="free") +
ggtitle("rolling 7-day mean of deaths in political violence/protest") +
geom_rect(aes(xmin=as.Date("2020-01-15"),xmax=as.Date("2020-10-01"),ymin=0,ymax=Inf),fill="pink",color=NA,alpha=0.01) +
theme_bw() + standard_theme + theme(axis.text.x=element_text(vjust=0.5,size=8)) +
scale_x_date(date_breaks="month",expand=expansion(0,0)) + scale_y_continuous(expand=expansion(0.01,0)); p # breaks=(0:20),
# SAVE
acled_monthly_fatalities=somalia_acled_fatalities %>% group_by(year,month,admin1) %>%
summarise(year=unique(year),date=min(date),fatalities=sum(fatalities_missing_as_0)) %>%
mutate(year_month=ifelse(nchar(as.character(month))==1,paste0(year,"/0",month),paste0(year,"/",month))) %>%
mutate(year_month=factor(year_month,levels=unique(year_month)))
ggplot(subset(acled_monthly_fatalities,date<=as.Date("2020-11-01") & date>as.Date("2018-11-01")),aes(x=year_month,y=fatalities)) +
geom_bar(stat="identity") + facet_wrap(~admin1,scales = "free") +
geom_rect(aes(xmin="2020/01",xmax="2020/10",ymin=0,ymax=Inf),fill="pink",color=NA,alpha=0.01) + ylab("deaths/month") +
theme_bw() + standard_theme + theme(axis.text.x=element_text(vjust=0.5,size=6))
acled_burial_comparison = left_join(subset(somalia_acled_fatalities,admin1=="Banadir") %>%
select(admin1,date,fatalities_missing_as_0,rollingmean,rollingsum,rollingsum_month_acled) %>%
rename(fatalities=fatalities_missing_as_0,rollingmean_acled=rollingmean,rolling_week_sum_acled=rollingsum),
burial_data[!rowSums(is.na(burial_data))==(ncol(burial_data)-1),!colSums(is.na(burial_data))==nrow(burial_data)] %>%
select(date,new_graves_best_ipol) %>% mutate(rolling_week_sum_burials=roll_sum(new_graves_best_ipol,7,fill=NA,align="right"),
rolling_month_sum_burials=roll_sum(new_graves_best_ipol,30,fill=NA,align="right")),   by="date")
# ggplot rolling sums
ggplot(acled_burial_comparison %>% ungroup() %>% select(date,rollingsum_month_acled,rolling_month_sum_burials) %>% pivot_longer(!date),
aes(date)) + geom_line(aes(x=date,y=value,group=name,color=name)) + theme_bw() + standard_theme + theme(legend.position="top") +
labs(color="") + scale_x_date(limits=as.Date(c("2019-01-01","2020-09-25")),date_breaks="2 weeks",expand=expansion(0.01,0)) +
scale_y_continuous(expand=expansion(0.01,0))
weekly_acled_burial_comparison = acled_burial_comparison %>% mutate(week=week(date),year=year(date)) %>% group_by(year,week) %>%
summarise(date=min(date),fatalities=sum(fatalities),rollingmean_acled=sum(rollingmean_acled),new_graves_best_ipol=sum(new_graves_best_ipol)) %>%
mutate(year_week=factor(paste0(year,"/",week),levels=unique(paste0(year,"/",week)))) %>%
mutate(year_week_merged=ifelse(week>=52,paste0(year,"/52_53"),as.character(year_week))) %>%
mutate(year_week_merged=factor(year_week_merged,levels=unique(year_week_merged))) %>% group_by(year_week_merged) %>%
summarise(year=unique(year),date=max(date),fatalities=sum(fatalities),new_graves_best_ipol=sum(new_graves_best_ipol))
# WEEKLY compare plot
p<-ggplot(subset(weekly_acled_burial_comparison,date>=as.Date("2019-01-01") & date<=as.Date("2020-10-01")) %>% pivot_longer(!c(date,year,year_week_merged))) +
#    geom_bar(aes(x=year_week_merged,y=value,group=name,fill=name),stat="identity",position=position_dodge(width=0.75),size=0.2) +
#  scale_fill_discrete(labels=c("deaths due to political violence (ACLED)","burials")) +
geom_point(aes(x=year_week_merged,y=value,group=name,color=name),pch="-",size=12) +
geom_vline(xintercept=(1:length(unique(weekly_acled_burial_comparison$year_week_merged)))-0.5,size=0.1,linetype="dashed") +
scale_color_discrete(labels=c("deaths due to political violence (ACLED)","burials")) +
theme_bw() + standard_theme + theme(axis.text.x = element_text(vjust=0.5),legend.position="bottom") + labs(fill="",color="") +
scale_y_continuous(expand=expansion(0.01,0),breaks=(0:20)*10) + xlab("year/week") + ylab("number/week"); p
ggplot(acled_burial_comparison %>% pivot_longer(!c(admin1,date)) %>% filter(date<=as.Date("2020-10-01")),aes(x=date)) + # geom_line() +
geom_bar(aes(y=fatalities,color="ACLED: daily deaths (armed conflicts/terrorism)"),stat="identity",alpha=0.1) +
geom_line(aes(y=rollingmean,color="ACLED: 7-day average")) + ggtitle("daily burials and deaths in armed conflicts/terror attacks") +
geom_line(aes(y=new_graves_best_ipol,color="daily burials")) + scale_color_manual(values=c("red","pink","black")) +
scale_x_date(date_breaks="month",expand=expansion(0.001,0)) + scale_y_continuous(breaks=5*(0:20),expand = expansion(0.01,0)) +
theme_bw() + standard_theme + theme(axis.text.x=element_text(vjust=0.5),legend.position = "bottom")
head(acled_burial_comparison %>% pivot_longer(!c(admin1,date)) %>% filter(date<=as.Date("2020-10-01")),2)
head(acled_burial_comparison,2)
ggplot(acled_burial_comparison %>% filter(date<=as.Date("2020-10-01")),aes(x=date)) + # geom_line() +
geom_bar(aes(y=value,color="ACLED: daily deaths (armed conflicts/terrorism)"),stat="identity",alpha=0.1) +
geom_line(aes(y=rollingmean,color="ACLED: 7-day average")) +
ggtitle("daily burials and deaths in armed conflicts/terror attacks") +
geom_line(aes(y=new_graves_best_ipol,color="daily burials")) + scale_color_manual(values=c("red","pink","black")) +
scale_x_date(date_breaks="month",expand=expansion(0.001,0)) + scale_y_continuous(breaks=5*(0:20),expand = expansion(0.01,0)) +
theme_bw() + standard_theme + theme(axis.text.x=element_text(vjust=0.5),legend.position = "bottom")
ggplot(acled_burial_comparison %>% filter(date<=as.Date("2020-10-01")),aes(x=date)) + # geom_line() +
geom_bar(aes(y=fatalities,color="ACLED: daily deaths (armed conflicts/terrorism)"),stat="identity",alpha=0.1) +
geom_line(aes(y=rollingmean,color="ACLED: 7-day average")) +
ggtitle("daily burials and deaths in armed conflicts/terror attacks") +
geom_line(aes(y=new_graves_best_ipol,color="daily burials")) + scale_color_manual(values=c("red","pink","black")) +
scale_x_date(date_breaks="month",expand=expansion(0.001,0)) + scale_y_continuous(breaks=5*(0:20),expand = expansion(0.01,0)) +
theme_bw() + standard_theme + theme(axis.text.x=element_text(vjust=0.5),legend.position = "bottom")
head(acled_burial_comparison,2)
ggplot(acled_burial_comparison %>% filter(date<=as.Date("2020-10-01")),aes(x=date)) + #  %>% pivot_longer(!c(admin1,date))
geom_bar(aes(y=fatalities,color="ACLED: daily deaths (armed conflicts/terrorism)"),stat="identity",alpha=0.1) +
geom_line(aes(y=rollingmean_acled,color="ACLED: 7-day average")) +
ggtitle("daily burials and deaths in armed conflicts/terror attacks") +
geom_line(aes(y=new_graves_best_ipol,color="daily burials")) + scale_color_manual(values=c("red","pink","black")) +
scale_x_date(date_breaks="month",expand=expansion(0.001,0)) + scale_y_continuous(breaks=5*(0:20),expand = expansion(0.01,0)) +
theme_bw() + standard_theme + theme(axis.text.x=element_text(vjust=0.5),legend.position = "bottom")
rm(list=ls()); currentdir_path=dirname(rstudioapi::getSourceEditorContext()$path); setwd(currentdir_path)
burial_data=read_csv("data/somalia_data/Mogadishu_data/mogadishu_burial_analysis-main/out_bdr_daily_estimates.csv")
baseline_daily_burials=mean(subset(burial_data,date>="2019-07-01" & date<="2019-11-01")$new_graves_best_ipol)
# subset for relevant period and columns
out_bdr_daily_estimates=burial_data[!rowSums(is.na(burial_data))==(ncol(burial_data)-1),
!colSums(is.na(burial_data))==nrow(burial_data)] %>% filter(date>"2019-11-01") %>%
mutate(daily_baseline_subtr=ifelse(new_graves_best_ipol-baseline_daily_burials>0,
new_graves_best_ipol-baseline_daily_burials,0),
rollmeanweek=roll_mean(daily_baseline_subtr,7,align="center", fill=NA), # rolling mean BASELINE subtracted
rollsumweek=roll_sum(daily_baseline_subtr,7,align="left",fill=NA),
rollmeanweek_no_subtr=roll_mean(new_graves_best_ipol,7,align="center", fill=NA),
rollsumweek_no_subtr=roll_sum(new_graves_best_ipol,7,align="left",fill=NA))
# Oxford Stringency Index
OxCGRT_url="https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
OxCGRT_input=fcn_get_OxCGRT(OxCGRT_url,"Somalia") %>% mutate(OxCGRT_scaled_smoothed=roll_mean(OxCGRT_scaled,30,align="center",fill=NA))
# separate into 4 phases
NPI_phases=list(first=c("2020-03-19","2020-06-30"),second=c("2020-07-01","2020-08-29"),
third=c("2020-08-30","2020-10-08"),fourth=c("2020-10-09","2020-11-01"))
NPIvals=sapply(NPI_phases,function(x) mean(OxCGRT_input$OxCGRT_scaled[OxCGRT_input$date>as.Date(x)[1]&OxCGRT_input$date<as.Date(x)[2]]))
npi_df=left_join(data.frame(t(data.frame(on_off=c("on","off"),NPI_phases))) %>% add_rownames(var="name") %>%
filter(!name=="on_off") %>% rename(on=X1,off=X2) %>% mutate(on=as.Date(on),off=as.Date(off)),
data.frame(NPIvals) %>% rownames_to_column(var="name"),by="name") %>% mutate(name=factor(name,levels=unique(name))) %>%
rename(contact_level=NPIvals) %>% mutate(contact_reduction=1-contact_level)
burial_data=read_csv("repo_data/out_bdr_daily_estimates.csv")
baseline_daily_burials=mean(subset(burial_data,date>="2019-07-01" & date<="2019-11-01")$new_graves_best_ipol)
# subset for relevant period and columns
out_bdr_daily_estimates=burial_data[!rowSums(is.na(burial_data))==(ncol(burial_data)-1),
!colSums(is.na(burial_data))==nrow(burial_data)] %>% filter(date>"2019-11-01") %>%
mutate(daily_baseline_subtr=ifelse(new_graves_best_ipol-baseline_daily_burials>0,
new_graves_best_ipol-baseline_daily_burials,0),
rollmeanweek=roll_mean(daily_baseline_subtr,7,align="center", fill=NA), # rolling mean BASELINE subtracted
rollsumweek=roll_sum(daily_baseline_subtr,7,align="left",fill=NA),
rollmeanweek_no_subtr=roll_mean(new_graves_best_ipol,7,align="center", fill=NA),
rollsumweek_no_subtr=roll_sum(new_graves_best_ipol,7,align="left",fill=NA))
OxCGRT_url="https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
OxCGRT_input=fcn_get_OxCGRT(OxCGRT_url,"Somalia") %>% mutate(OxCGRT_scaled_smoothed=roll_mean(OxCGRT_scaled,30,align="center",fill=NA))
# separate into 4 phases
NPI_phases=list(first=c("2020-03-19","2020-06-30"),second=c("2020-07-01","2020-08-29"),
third=c("2020-08-30","2020-10-08"),fourth=c("2020-10-09","2020-11-01"))
source("somalia_data_model_fcns.R")
OxCGRT_input=fcn_get_OxCGRT(OxCGRT_url,"Somalia") %>% mutate(OxCGRT_scaled_smoothed=roll_mean(OxCGRT_scaled,30,align="center",fill=NA))
NPI_phases=list(first=c("2020-03-19","2020-06-30"),second=c("2020-07-01","2020-08-29"),
third=c("2020-08-30","2020-10-08"),fourth=c("2020-10-09","2020-11-01"))
NPIvals=sapply(NPI_phases,function(x) mean(OxCGRT_input$OxCGRT_scaled[OxCGRT_input$date>as.Date(x)[1]&OxCGRT_input$date<as.Date(x)[2]]))
npi_df=left_join(data.frame(t(data.frame(on_off=c("on","off"),NPI_phases))) %>% add_rownames(var="name") %>%
filter(!name=="on_off") %>% rename(on=X1,off=X2) %>% mutate(on=as.Date(on),off=as.Date(off)),
data.frame(NPIvals) %>% rownames_to_column(var="name"),by="name") %>% mutate(name=factor(name,levels=unique(name))) %>%
rename(contact_level=NPIvals) %>% mutate(contact_reduction=1-contact_level)
IFR_estimates_Sandmann2021 <- read_csv("data/IFR_estimates_Sandmann2021.csv")
if (any(IFR_estimates_Sandmann2021$value_percent>1)) {n_cols<-2:ncol(IFR_estimates_Sandmann2021)
IFR_estimates_Sandmann2021[,n_cols]<-IFR_estimates_Sandmann2021[,n_cols]/1e2
IFR_estimates_Sandmann2021 <- left_join(IFR_estimates_Sandmann2021 %>% rename(agegroup=Age,ifr_mean=value_percent),
somalia_agegroups_IFR %>% select(!c(ifr_mean,log_ifr,logit_ifr)),by="agegroup") %>% mutate(logit_ifr=log(ifr_mean/(1-ifr_mean))) }
somalia_agegroups_IFR=fcn_merge_ifr_above_age(left_join(fcn_load_age_str("Somalia",n_year="2015",90),
fcn_load_ifr("data/IFR_by_age_imperial.csv"),by=c("agegroup","agegroup_min")),75) %>%
mutate(ifr_mean=ifelse(ifr_mean==0,min(ifr_mean[ifr_mean>0]),ifr_mean),log_ifr=log(ifr_mean),logit_ifr=log(ifr_mean/(1-ifr_mean)))
# IFR estimates from Sandmann 2021 cmmid paper
IFR_estimates_Sandmann2021 <- read_csv("data/IFR_estimates_Sandmann2021.csv")
if (any(IFR_estimates_Sandmann2021$value_percent>1)) {n_cols<-2:ncol(IFR_estimates_Sandmann2021)
IFR_estimates_Sandmann2021[,n_cols]<-IFR_estimates_Sandmann2021[,n_cols]/1e2
IFR_estimates_Sandmann2021 <- left_join(IFR_estimates_Sandmann2021 %>% rename(agegroup=Age,ifr_mean=value_percent),
somalia_agegroups_IFR %>% select(!c(ifr_mean,log_ifr,logit_ifr)),by="agegroup") %>% mutate(logit_ifr=log(ifr_mean/(1-ifr_mean))) }
getwd()
somalia_agegroups_IFR=fcn_merge_ifr_above_age(left_join(fcn_load_age_str("Somalia",n_year="2015",90),
fcn_load_ifr("repo_data/IFR_by_age_imperial.csv"),by=c("agegroup","agegroup_min")),75) %>%
mutate(ifr_mean=ifelse(ifr_mean==0,min(ifr_mean[ifr_mean>0]),ifr_mean),log_ifr=log(ifr_mean),logit_ifr=log(ifr_mean/(1-ifr_mean)))
data(pop)
somalia_agegroups_IFR=fcn_merge_ifr_above_age(left_join(fcn_load_age_str("Somalia",n_year="2015",90),
fcn_load_ifr("repo_data/IFR_by_age_imperial.csv"),by=c("agegroup","agegroup_min")),75) %>%
mutate(ifr_mean=ifelse(ifr_mean==0,min(ifr_mean[ifr_mean>0]),ifr_mean),log_ifr=log(ifr_mean),logit_ifr=log(ifr_mean/(1-ifr_mean)))
IFR_estimates_Sandmann2021 <- read_csv("repo_data/IFR_estimates_Sandmann2021.csv")
if (any(IFR_estimates_Sandmann2021$value_percent>1)) {n_cols<-2:ncol(IFR_estimates_Sandmann2021)
IFR_estimates_Sandmann2021[,n_cols]<-IFR_estimates_Sandmann2021[,n_cols]/1e2
IFR_estimates_Sandmann2021 <- left_join(IFR_estimates_Sandmann2021 %>% rename(agegroup=Age,ifr_mean=value_percent),
somalia_agegroups_IFR %>% select(!c(ifr_mean,log_ifr,logit_ifr)),by="agegroup") %>% mutate(logit_ifr=log(ifr_mean/(1-ifr_mean))) }
cm_path="~/Desktop/research/models/epid_models/covid_model/lmic_model/covidm/"
cm_force_rebuild=F; cm_build_verbose=T; cm_version=1; source(file.path(cm_path,"R","covidm.R"))
countryval="Somalia"; params=cm_parameters_SEI3R(gsub("Sudan|Somalia","Ethiopia",countryval),
date_start="2019-11-01",date_end="2020-10-01")
# set population: Somalia --> Mogadishu
params$pop[[1]]$name=countryval
params$pop[[1]]$size=somalia_agegroups_IFR$agegroupsize*(mogadishu_popul/sum(somalia_agegroups_IFR$agegroupsize))
params$pop[[1]]$dist_seed_ages=cm_age_coefficients(20,30,5*(0:length(params$pop[[1]]$size)))
params$pop[[1]]$y=fun_lin_approx_agedep_par(agegroups=somalia_agegroups_IFR,min_val=0.25,max_val=0.7,rep_min=6,rep_max=2)
fitting_params <- c("R0_fit","introd_date","npi_scale") # "seed_size","compliance"
pf <- function(parameters, x){x=as.list(x); n_groups=length(parameters$pop[[1]]$size)
# R0
target_R0=2; parameters$pop[[1]]$u=c(rep(0.0145,4),rep(0.0305,12))*(x$R0_fit/target_R0) #  # cm_calc_R0(params,1)
# seed size and introd date: continuous seeding or one-time event?
seeding_t_window=round(x$introd_date):round(x$introd_date+round(n_seedsize/10))
parameters$pop[[1]]$seed_times=rep(seeding_t_window,each=10) # x new infections/day for n days
# parameters$pop[[1]]$seed_times=rep(round(x$introd_date):round(x$introd_date),each=n_seedsize) # x$seed_size
# IFR
agegroupmeans=c(2.5+(0:14)*5,80.255) # slope_val<-0.0999 # as.numeric(linregr$coefficients["agegroup_mean"])
# estimates used in Sandmann 2021 (and other CMMID publs)
ifr_logit <- c(-10.414283,-11.512915,-11.512915,-10.414283,-9.721106,-8.947846,-8.334632,-7.823646,-7.194687,
-6.715924,-6.178135,-5.732038,-5.385862,-4.522041,-4.073073,-2.026972)
# x$ifr_logit_intercept+slope_val*agegroupmeans
parameters$processes<-list(cm_multinom_process("Ip",
outcomes=data.table(death=inv.logit(ifr_logit + ifr_logit_increm)/parameters$pop[[1]]$y),
delays=data.table(death=data.table(death=cm_delay_gamma(22,22,60,1/4)$p)),report="o"))
# compliance
t_npi=list(first=c("2020-03-19","2020-06-30"),second=c("2020-07-01","2020-08-29"),
third=c("2020-08-30","2020-10-08"),fourth=c("2020-10-09","2020-11-01")); npi_vals=c(0.455,0.736,0.593,0.624)
for (k in 1:length(npi_vals)) { if (k==1) {iv=cm_iv_build(parameters)}
cm_iv_contact(iv, t_npi[[k]][1], t_npi[[k]][2], 1 - (1-as.numeric(rep(npi_vals[k],4)) )*x$npi_scale)
if (k==length(npi_vals)) {parameters$pop[[1]]$schedule=NULL; parameters=cm_iv_apply(parameters,iv)} }
return (parameters)
}
likelihood = function(parameters, dynamics, data, x){
inc = data; inc[, t := as.numeric(date - ymd(parameters$date0))]
# simulations output scaled!!!
eval = merge(dynamics[compartment == "death_o", .(model_case = sum(value)/parameters$scaling), by = t], inc, by = "t");
ll = sum(dpois(eval$new_deaths, lambda = pmax(0.1, eval$model_case), log = T)); return (ll) }
priors=list(R0_fit="N 3 1 T 1 5", introd_date="N 182 20",npi_scale="U 0 1") # ,compliance="U 0 1" # ifr_logit_intercept="N -10.8 2"
ggplot(fitting_incidence_modelcompare %>% filter(date>as.Date("2020-01-15")&date<as.Date("2020-06-20")) %>%
select(date,new_deaths) %>% pivot_longer(!date),aes(x=date,y=value)) + geom_line() + geom_point() +
theme_bw() + scale_x_date(date_breaks="2 days",expand=expansion(0,0)) + standard_theme +
theme(axis.text.x=element_text(vjust=0.5),legend.position="top") +
geom_vline(xintercept=as.Date("2020-04-13"),linetype="dashed",size=0.4)
fitting_incidence <- data.table(out_bdr_daily_estimates %>% select(date,daily_baseline_subtr) %>%
mutate(daily_baseline_subtr=round(daily_baseline_subtr))) %>%
filter(date>=fitting_date_window[1] & date<=fitting_date_window[2]) %>% rename(new_deaths=daily_baseline_subtr)
fitting_date_window
fitting_date_window=as.Date(c("2020-02-23","2020-08-24")) # c("2020-01-15","2020-04-13") # c("2020-01-15","2020-10-01")
fitting_incidence <- data.table(out_bdr_daily_estimates %>% select(date,daily_baseline_subtr) %>%
mutate(daily_baseline_subtr=round(daily_baseline_subtr))) %>%
filter(date>=fitting_date_window[1] & date<=fitting_date_window[2]) %>% rename(new_deaths=daily_baseline_subtr)
ggplot(fitting_incidence_modelcompare %>% filter(date>as.Date("2020-01-15")&date<as.Date("2020-06-20")) %>%
select(date,new_deaths) %>% pivot_longer(!date),aes(x=date,y=value)) + geom_line() + geom_point() +
theme_bw() + scale_x_date(date_breaks="2 days",expand=expansion(0,0)) + standard_theme +
theme(axis.text.x=element_text(vjust=0.5),legend.position="top") +
geom_vline(xintercept=as.Date("2020-04-13"),linetype="dashed",size=0.4)
ggplot(fitting_incidence %>% filter(date>as.Date("2020-01-15")&date<as.Date("2020-06-20")) %>%
select(date,new_deaths) %>% pivot_longer(!date),aes(x=date,y=value)) + geom_line() + geom_point() +
theme_bw() + scale_x_date(date_breaks="2 days",expand=expansion(0,0)) + standard_theme +
theme(axis.text.x=element_text(vjust=0.5),legend.position="top") +
geom_vline(xintercept=as.Date("2020-04-13"),linetype="dashed",size=0.4)
ggplot(fitting_incidence %>% select(date,new_deaths) %>% pivot_longer(!date),aes(x=date,y=value)) + geom_line() + geom_point() +
theme_bw() + scale_x_date(date_breaks="2 days",expand=expansion(0,0)) + standard_theme +
theme(axis.text.x=element_text(vjust=0.5),legend.position="top") +
geom_vline(xintercept=as.Date("2020-04-13"),linetype="dashed",size=0.4)
head(fitting_incidence)
ggplot(fitting_incidence,aes(x=date,y=value)) + geom_line() + geom_point() +
theme_bw() + scale_x_date(date_breaks="2 days",expand=expansion(0,0)) + standard_theme +
theme(axis.text.x=element_text(vjust=0.5),legend.position="top") +
geom_vline(xintercept=as.Date("2020-04-13"),linetype="dashed",size=0.4)
ggplot(fitting_incidence,aes(x=date,y=new_deaths)) + geom_line() + geom_point() +
theme_bw() + scale_x_date(date_breaks="2 days",expand=expansion(0,0)) + standard_theme +
theme(axis.text.x=element_text(vjust=0.5),legend.position="top") +
geom_vline(xintercept=as.Date("2020-04-13"),linetype="dashed",size=0.4)
parscan_dirname=paste0("simul_output/somalia/scan_seedsize_ifr_",
gsub(" ","_",paste0(paste0(gsub("_","",names(priors)[2]),"_",unlist(priors)[2],""),collapse="_")),
"_fitperiod_",paste0(gsub("-","",fitting_date_window),collapse = "_"))
parscan_dirname
CDR_vals=c(1e4*baseline_daily_burials/mogadishu_popul,0.1,0.2,0.4)[1]
mogadishu_popul=2.2e6; CDR_vals=c(1e4*baseline_daily_burials/mogadishu_popul,0.1,0.2,0.4)[1]
params$date0="2019-11-01"
# select range of seed sizes
scan_seed_vals=10 # c(20,50,100,200,500)
# select range of IFR values
ifr_increm_vals=c(0,1,2) # scan_compliance_vals=c(0,0.25,0.5)
fits_death_scaling=list(); fits_compliance=list()
params$date0="2019-11-01"
# select range of seed sizes
scan_seed_vals=10 # c(20,50,100,200,500)
# select range of IFR values
ifr_increm_vals=c(0,1,2) # scan_compliance_vals=c(0,0.25,0.5)
fits_death_scaling=list(); fits_compliance=list()
for (n_seedsize in scan_seed_vals) {
for (ifr_logit_increm in ifr_increm_vals) {
for (k in 1:length(CDR_vals)) { # introd_date ifr_logit_intercept
scale_factor=(mogadishu_popul*CDR_vals[k]/1e4)/baseline_daily_burials; params$scaling=scale_factor
fitting_incidence <- data.table(out_bdr_daily_estimates %>% select(date,daily_baseline_subtr) %>%
mutate(daily_baseline_subtr=round(daily_baseline_subtr))) %>%
filter(date>=fitting_date_window[1] & date<=fitting_date_window[2]) %>% rename(new_deaths=daily_baseline_subtr)
### fitting -------------------
print(paste0("#### fitting to CDR=",round(CDR_vals[k],3),"##, ifr_logit increm=",ifr_logit_increm," ### seedsize=",n_seedsize," ##"))
fits_death_scaling[[k]]=cm_fit(base_parameters=params, priors=priors, parameters_func=pf, likelihood_func=likelihood,
data=fitting_incidence, mcmc_burn_in=5e2, mcmc_samples=2e3, mcmc_init_opt=F, opt_maxeval=25 )
if (k==length(CDR_vals)) {
saveRDS(fits_death_scaling, paste0(parscan_dirname,"/fits_death_",paste0(fitting_date_window,collapse = "_"),
"_ifr_increm",ifr_logit_increm,"_seedsize",n_seedsize,".rds") )}
}
# fits_compliance[[which(scan_compliance_vals %in% n_compliance)]]=fits_death_scaling
}
# fits_all[[which(scan_seed_vals %in% n_seedsize)]]=fits_compliance
}
rm(list=ls()); currentdir_path=dirname(rstudioapi::getSourceEditorContext()$path); setwd(currentdir_path)
lapply(c("tidyverse","deSolve","qs","gtools","rstudioapi","wpp2019","countrycode","coronavirus","wesanderson","dttr2","RcppRoll",
"scales","wpp2019","GGally","corrr","ungeviz"), library,character.only=TRUE)
# functions and plotting theme
source("somalia_data_model_fcns.R")
parscan_mcmc_dirname=
"simul_output/somalia/3param_fits_seedsize_IFR_fixed/scan_seedsize_ifr_introddate_N_182_20_fitperiod_20200223_20200413/seedsize200/"
parfit_scan_files<-list.files(parscan_mcmc_dirname,pattern = ".rds"); # slope_val=round(as.numeric(linregr$coefficients[2]),4)
onefit=readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[1]))[[1]]; x_dodge_val=0.6; fitting_params <- names(onefit$priors)
scan_params<-c("seedsize","ifr_logit_increm","IFR all infections (%)")
CDR_vals=c(baseline_daily_burials*1e4/mogadishu_popul,0.1,0.2,0.4)[1:length(readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[1])))]
for (k in 1:length(parfit_scan_files)) {
for (n_CDR in 1:length(CDR_vals)) {
df_posteriors=readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[k]))[[n_CDR]]$posterior %>%
select(chain,trial,lp,all_of(fitting_params)) %>%
mutate(CDR=round(CDR_vals[n_CDR],3)) %>%
mutate(ifr_logit_increm=as.numeric(gsub("ifr_increm|_","",as.numeric(str_match(parfit_scan_files[k],"ifr_increm(.*?)_")[2]))),
seedsize=as.numeric(str_match(parfit_scan_files[k],"seedsize(.*?).rds")[2]),`IFR all infections (%)`=sapply(ifr_logit_increm,
function(x) 1e2*sum(inv.logit(IFR_estimates_Sandmann2021$logit_ifr + x)*somalia_agegroups_IFR$agegroup_perc) ) )
if (n_CDR==1){df_posteriors_comb=df_posteriors} else {df_posteriors_comb=rbind(df_posteriors_comb,df_posteriors)}
}
if (k==1) {df_posteriors_parscan=df_posteriors_comb} else { df_posteriors_parscan=bind_rows(df_posteriors_parscan,df_posteriors_comb)}
}
baseline_daily_burials
burial_data
out_bdr_daily_estimates=burial_data[!rowSums(is.na(burial_data))==(ncol(burial_data)-1),
!colSums(is.na(burial_data))==nrow(burial_data)] %>% filter(date>"2019-11-01") %>%
mutate(daily_baseline_subtr=ifelse(new_graves_best_ipol-baseline_daily_burials>0,
new_graves_best_ipol-baseline_daily_burials,0),
rollmeanweek=roll_mean(daily_baseline_subtr,7,align="center", fill=NA), # rolling mean BASELINE subtracted
rollsumweek=roll_sum(daily_baseline_subtr,7,align="left",fill=NA),
rollmeanweek_no_subtr=roll_mean(new_graves_best_ipol,7,align="center", fill=NA),
rollsumweek_no_subtr=roll_sum(new_graves_best_ipol,7,align="left",fill=NA))
burial_data=read_csv("repo_data/out_bdr_daily_estimates.csv")
baseline_daily_burials=mean(subset(burial_data,date>="2019-07-01" & date<="2019-11-01")$new_graves_best_ipol)
out_bdr_daily_estimates=burial_data[!rowSums(is.na(burial_data))==(ncol(burial_data)-1),
!colSums(is.na(burial_data))==nrow(burial_data)] %>% filter(date>"2019-11-01") %>%
mutate(daily_baseline_subtr=ifelse(new_graves_best_ipol-baseline_daily_burials>0,
new_graves_best_ipol-baseline_daily_burials,0),
rollmeanweek=roll_mean(daily_baseline_subtr,7,align="center", fill=NA), # rolling mean BASELINE subtracted
rollsumweek=roll_sum(daily_baseline_subtr,7,align="left",fill=NA),
rollmeanweek_no_subtr=roll_mean(new_graves_best_ipol,7,align="center", fill=NA),
rollsumweek_no_subtr=roll_sum(new_graves_best_ipol,7,align="left",fill=NA))
CDR_vals=c(baseline_daily_burials*1e4/mogadishu_popul,0.1,0.2,0.4)[1:length(readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[1])))]
mogadishu_popul=2.2e6
CDR_vals=c(baseline_daily_burials*1e4/mogadishu_popul,0.1,0.2,0.4)[1:length(readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[1])))]
CDR_vals=c(baseline_daily_burials*1e4/mogadishu_popul,0.1,0.2,0.4)[1:length(readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[1])))]
for (k in 1:length(parfit_scan_files)) {
for (n_CDR in 1:length(CDR_vals)) {
df_posteriors=readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[k]))[[n_CDR]]$posterior %>%
select(chain,trial,lp,all_of(fitting_params)) %>%
mutate(CDR=round(CDR_vals[n_CDR],3)) %>%
mutate(ifr_logit_increm=as.numeric(gsub("ifr_increm|_","",as.numeric(str_match(parfit_scan_files[k],"ifr_increm(.*?)_")[2]))),
seedsize=as.numeric(str_match(parfit_scan_files[k],"seedsize(.*?).rds")[2]),`IFR all infections (%)`=sapply(ifr_logit_increm,
function(x) 1e2*sum(inv.logit(IFR_estimates_Sandmann2021$logit_ifr + x)*somalia_agegroups_IFR$agegroup_perc) ) )
if (n_CDR==1){df_posteriors_comb=df_posteriors} else {df_posteriors_comb=rbind(df_posteriors_comb,df_posteriors)}
}
if (k==1) {df_posteriors_parscan=df_posteriors_comb} else { df_posteriors_parscan=bind_rows(df_posteriors_parscan,df_posteriors_comb)}
}
somalia_agegroups_IFR=fcn_merge_ifr_above_age(left_join(fcn_load_age_str("Somalia",n_year="2015",90),
fcn_load_ifr("repo_data/IFR_by_age_imperial.csv"),by=c("agegroup","agegroup_min")),75) %>%
mutate(ifr_mean=ifelse(ifr_mean==0,min(ifr_mean[ifr_mean>0]),ifr_mean),log_ifr=log(ifr_mean),logit_ifr=log(ifr_mean/(1-ifr_mean)))
somal_popul_tot=sum(somalia_agegroups_IFR$agegroupsize); mogadishu_popul=2.2e6 # somalia_agegroups_IFR$ifr_mean[1]=3e-6;
# from Sandmann 2021 cmmid paper
IFR_estimates_Sandmann2021<-read_csv("repo_data/IFR_estimates_Sandmann2021.csv")
if (any(IFR_estimates_Sandmann2021$value_percent>1)) {n_cols<-2:ncol(IFR_estimates_Sandmann2021)
IFR_estimates_Sandmann2021[,n_cols]<-IFR_estimates_Sandmann2021[,n_cols]/1e2;
IFR_estimates_Sandmann2021 <- left_join(IFR_estimates_Sandmann2021 %>% rename(agegroup=Age,ifr_mean=value_percent),
somalia_agegroups_IFR %>% select(!c(ifr_mean,log_ifr,logit_ifr)),by="agegroup") %>% mutate(logit_ifr=log(ifr_mean/(1-ifr_mean)))
}
somalia_agegroups_IFR=fcn_merge_ifr_above_age(left_join(fcn_load_age_str("Somalia",n_year="2015",90),
fcn_load_ifr("repo_data/IFR_by_age_imperial.csv"),by=c("agegroup","agegroup_min")),75) %>%
mutate(ifr_mean=ifelse(ifr_mean==0,min(ifr_mean[ifr_mean>0]),ifr_mean),log_ifr=log(ifr_mean),logit_ifr=log(ifr_mean/(1-ifr_mean)))
data(pop)
somalia_agegroups_IFR=fcn_merge_ifr_above_age(left_join(fcn_load_age_str("Somalia",n_year="2015",90),
fcn_load_ifr("repo_data/IFR_by_age_imperial.csv"),by=c("agegroup","agegroup_min")),75) %>%
mutate(ifr_mean=ifelse(ifr_mean==0,min(ifr_mean[ifr_mean>0]),ifr_mean),log_ifr=log(ifr_mean),logit_ifr=log(ifr_mean/(1-ifr_mean)))
IFR_estimates_Sandmann2021<-read_csv("repo_data/IFR_estimates_Sandmann2021.csv")
if (any(IFR_estimates_Sandmann2021$value_percent>1)) {n_cols<-2:ncol(IFR_estimates_Sandmann2021)
IFR_estimates_Sandmann2021[,n_cols]<-IFR_estimates_Sandmann2021[,n_cols]/1e2;
IFR_estimates_Sandmann2021 <- left_join(IFR_estimates_Sandmann2021 %>% rename(agegroup=Age,ifr_mean=value_percent),
somalia_agegroups_IFR %>% select(!c(ifr_mean,log_ifr,logit_ifr)),by="agegroup") %>% mutate(logit_ifr=log(ifr_mean/(1-ifr_mean)))
}
for (k in 1:length(parfit_scan_files)) {
for (n_CDR in 1:length(CDR_vals)) {
df_posteriors=readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[k]))[[n_CDR]]$posterior %>%
select(chain,trial,lp,all_of(fitting_params)) %>%
mutate(CDR=round(CDR_vals[n_CDR],3)) %>%
mutate(ifr_logit_increm=as.numeric(gsub("ifr_increm|_","",as.numeric(str_match(parfit_scan_files[k],"ifr_increm(.*?)_")[2]))),
seedsize=as.numeric(str_match(parfit_scan_files[k],"seedsize(.*?).rds")[2]),`IFR all infections (%)`=sapply(ifr_logit_increm,
function(x) 1e2*sum(inv.logit(IFR_estimates_Sandmann2021$logit_ifr + x)*somalia_agegroups_IFR$agegroup_perc) ) )
if (n_CDR==1){df_posteriors_comb=df_posteriors} else {df_posteriors_comb=rbind(df_posteriors_comb,df_posteriors)}
}
if (k==1) {df_posteriors_parscan=df_posteriors_comb} else { df_posteriors_parscan=bind_rows(df_posteriors_parscan,df_posteriors_comb)}
}
posteriors_summary_stats = df_posteriors_parscan %>% mutate(n=row_number()) %>%
pivot_longer(!c(n,all_of(scan_params),chain,trial,lp)) %>% group_by(name,ifr_logit_increm,seedsize) %>%
summarise(mean=mean(value),median=median(value),
ci95_low=quantile(value,probs=c(2.5,97.5)/1e2)[1],ci95_up=quantile(value,probs=c(2.5,97.5)/1e2)[2],
ci50_low=quantile(value,probs=c(25,75)/1e2)[1],ci50_up=quantile(value,probs=c(25,75)/1e2)[2],
post_lkl_mean=mean(lp),post_lkl_ci95_low=quantile(lp,probs=c(2.5,97.5)/1e2)[1],
post_lkl_ci95_up=quantile(lp,probs=c(2.5,97.5)/1e2)[2]) %>%
mutate(name=ifelse(name %in% "introd_date",paste0("introduction (days after ",
format(as.Date(onefit$base_parameters$date0),"%d/%m/%y"),")"),name),name=ifelse(name %in% "NPI_scale","NPI NPI_scale (0 to 1)",name))
rm(list=ls()); currentdir_path=dirname(rstudioapi::getSourceEditorContext()$path); setwd(currentdir_path)
lapply(c("tidyverse","deSolve","qs","gtools","rstudioapi","wpp2019","countrycode","coronavirus","wesanderson","dttr2","RcppRoll",
"scales","wpp2019","GGally","corrr","ungeviz"), library,character.only=TRUE)
# functions and plotting theme
source("somalia_data_model_fcns.R")
# load folder (change to "repo_data" or own folder)
parscan_mcmc_dirname=
"simul_output/somalia/3param_fits_seedsize_IFR_fixed/scan_seedsize_ifr_introddate_N_182_20_fitperiod_20200223_20200824/"
parfit_scan_files<-list.files(parscan_mcmc_dirname,pattern = ".rds"); # slope_val=round(as.numeric(linregr$coefficients[2]),4)
# need to have IFR estimates from Sandmann: IFR_estimates_Sandmann2021$logit_ifr
# how many CDR values were used?
onefit=readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[1]))[[1]]; x_dodge_val=0.6; fitting_params <- names(onefit$priors)
scan_params<-c("seedsize","ifr_logit_increm","IFR all infections (%)")
burial_data=read_csv("repo_data/out_bdr_daily_estimates.csv")
baseline_daily_burials=mean(subset(burial_data,date>="2019-07-01" & date<="2019-11-01")$new_graves_best_ipol)
out_bdr_daily_estimates=burial_data[!rowSums(is.na(burial_data))==(ncol(burial_data)-1),
!colSums(is.na(burial_data))==nrow(burial_data)] %>% filter(date>"2019-11-01") %>%
mutate(daily_baseline_subtr=ifelse(new_graves_best_ipol-baseline_daily_burials>0,
new_graves_best_ipol-baseline_daily_burials,0),
rollmeanweek=roll_mean(daily_baseline_subtr,7,align="center", fill=NA), # rolling mean BASELINE subtracted
rollsumweek=roll_sum(daily_baseline_subtr,7,align="left",fill=NA),
rollmeanweek_no_subtr=roll_mean(new_graves_best_ipol,7,align="center", fill=NA),
rollsumweek_no_subtr=roll_sum(new_graves_best_ipol,7,align="left",fill=NA))
# CDR (crude death rate) value: fitting only with estimate from data
mogadishu_popul=2.2e6
CDR_vals=c(baseline_daily_burials*1e4/mogadishu_popul,0.1,0.2,0.4)[1:length(readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[1])))]
# load IFR
data(pop)
somalia_agegroups_IFR=fcn_merge_ifr_above_age(left_join(fcn_load_age_str("Somalia",n_year="2015",90),
fcn_load_ifr("repo_data/IFR_by_age_imperial.csv"),by=c("agegroup","agegroup_min")),75) %>%
mutate(ifr_mean=ifelse(ifr_mean==0,min(ifr_mean[ifr_mean>0]),ifr_mean),log_ifr=log(ifr_mean),logit_ifr=log(ifr_mean/(1-ifr_mean)))
# from Sandmann 2021 cmmid paper
IFR_estimates_Sandmann2021<-read_csv("repo_data/IFR_estimates_Sandmann2021.csv")
if (any(IFR_estimates_Sandmann2021$value_percent>1)) {n_cols<-2:ncol(IFR_estimates_Sandmann2021)
IFR_estimates_Sandmann2021[,n_cols]<-IFR_estimates_Sandmann2021[,n_cols]/1e2;
IFR_estimates_Sandmann2021 <- left_join(IFR_estimates_Sandmann2021 %>% rename(agegroup=Age,ifr_mean=value_percent),
somalia_agegroups_IFR %>% select(!c(ifr_mean,log_ifr,logit_ifr)),by="agegroup") %>% mutate(logit_ifr=log(ifr_mean/(1-ifr_mean)))
}
scan_params<-c("seedsize","ifr_logit_increm","IFR all infections (%)")
CDR_vals=c(baseline_daily_burials*1e4/mogadishu_popul,0.1,0.2,0.4)[1:length(readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[1])))]
for (k in 1:length(parfit_scan_files)) {
for (n_CDR in 1:length(CDR_vals)) {
df_posteriors=readRDS(paste0(parscan_mcmc_dirname,parfit_scan_files[k]))[[n_CDR]]$posterior %>%
select(chain,trial,lp,all_of(fitting_params)) %>%
mutate(CDR=round(CDR_vals[n_CDR],3)) %>%
mutate(ifr_logit_increm=as.numeric(gsub("ifr_increm|_","",as.numeric(str_match(parfit_scan_files[k],"ifr_increm(.*?)_")[2]))),
seedsize=as.numeric(str_match(parfit_scan_files[k],"seedsize(.*?).rds")[2]),`IFR all infections (%)`=sapply(ifr_logit_increm,
function(x) 1e2*sum(inv.logit(IFR_estimates_Sandmann2021$logit_ifr + x)*somalia_agegroups_IFR$agegroup_perc) ) )
if (n_CDR==1){df_posteriors_comb=df_posteriors} else {df_posteriors_comb=rbind(df_posteriors_comb,df_posteriors)}
}
if (k==1) {df_posteriors_parscan=df_posteriors_comb} else { df_posteriors_parscan=bind_rows(df_posteriors_parscan,df_posteriors_comb)}
}
dim(df_posteriors_parscan)
